import os
import streamlit as st
from langchain_community.document_loaders import PDFPlumberLoader, TextLoader
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_core.vectorstores import InMemoryVectorStore
from langchain_ollama import OllamaEmbeddings
from langchain_core.prompts import ChatPromptTemplate
from langchain_ollama.llms import OllamaLLM

# Custom CSS inspired by Cogniss.com generated by Grok. 
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap');

    .stApp {
        background: linear-gradient(135deg, #0A0B1A 0%, #1E1E3A 100%);
        color: #E6E6FA;
        font-family: 'Poppins', sans-serif;
    }

    /* Title and Subtitle */
    h1 {
        color: #00D4FF;
        font-weight: 700;
        text-align: center;
        text-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
    }
    h3 {
        color: #A0A0FF;
        font-weight: 400;
        text-align: center;
        margin-bottom: 30px;
    }

    /* Divider */
    .divider {
        border-top: 1px solid #A0A0FF;
        margin: 20px 0;
        opacity: 0.3;
    }

    /* Chat Container */
    .chat-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    /* Chat Messages */
    .stChatMessage[data-testid="stChatMessage"] {
        background: #2A2A4A;
        border-radius: 15px;
        padding: 15px;
        margin: 10px 0;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    .stChatMessage[data-testid="stChatMessage"]:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(0, 212, 255, 0.2);
    }
    .stChatMessage p {
        color: #E6E6FA !important;
        margin: 0;
    }
    /* User Message */
    .stChatMessage[data-testid="stChatMessage"]:nth-child(odd) {
        background: #3A3A5A;
        border: 1px solid #00D4FF;
    }
    /* Assistant Message */
    .stChatMessage[data-testid="stChatMessage"]:nth-child(even) {
        background: #2A2A4A;
        border: 1px solid #A0A0FF;
    }
    .stChatMessage .avatar {
        background: #00D4FF !important;
        color: #0A0B1A !important;
        border-radius: 50%;
    }

    /* Chat Input */
    .stChatInput input {
        background: #1E1E3A !important;
        color: #E6E6FA !important;
        border: 1px solid #A0A0FF !important;
        border-radius: 25px !important;
        padding: 12px 20px !important;
        transition: border-color 0.2s ease;
    }
    .stChatInput input:focus {
        border-color: #00D4FF !important;
        box-shadow: 0 0 8px rgba(0, 212, 255, 0.3);
    }

    /* File Card */
    .file-card {
        background: #2A2A4A;
        border: 1px solid #A0A0FF;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    .file-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(0, 212, 255, 0.2);
    }
    .file-card p {
        margin: 0;
        color: #E6E6FA;
    }

    /* Spinner */
    .stSpinner > div > div {
        border-color: #00D4FF transparent transparent transparent !important;
    }

    /* Success/Error Messages */
    .stSuccess, .stError {
        background: #2A2A4A !important;
        border-radius: 10px;
        padding: 15px;
        color: #E6E6FA !important;
    }
    .stSuccess {
        border: 1px solid #00D4FF;
    }
    .stError {
        border: 1px solid #FF4D4D;
    }
    </style>
    """, unsafe_allow_html=True)

PDF_FOLDER_PATH = "text"  #folder here
EMBEDDING_MODEL = OllamaEmbeddings(model="deepseek-r1:1.5b")
DOCUMENT_VECTOR_DB = InMemoryVectorStore(EMBEDDING_MODEL)
LANGUAGE_MODEL = OllamaLLM(model="deepseek-r1:1.5b")
PROMPT_TEMPLATE = """
You are an expert research assistant. Use the provided context to answer the query. 
If unsure, state that you don't know. Be concise and factual (max 3 sentences).

Query: {user_query} 
Context: {document_context} 
Answer:
"""

# Get the chatbot to learn the doc: 
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []

def get_document_files():
    try:
        files = [os.path.join(PDF_FOLDER_PATH, f) for f in os.listdir(PDF_FOLDER_PATH) if f.endswith((".pdf", ".txt"))]
        if not files:
            st.error("Folder has no files.")
            return []
        return files
    except Exception as e:
        st.error(f"Error accessing folder: {e}")
        return []

def load_documents(file_path):
    try:
        if file_path.endswith(".pdf"):
            document_loader = PDFPlumberLoader(file_path)
        elif file_path.endswith(".txt"):
            document_loader = TextLoader(file_path)
        else:
            st.warning(f"Skipping unsupported file: {os.path.basename(file_path)}")
            return []
        return document_loader.load()
    except Exception as e:
        st.error(f"Error loading {os.path.basename(file_path)}: {e}")
        return []

def chunk_documents(raw_documents):
    text_processor = RecursiveCharacterTextSplitter(
        chunk_size=1000,
        chunk_overlap=200,
        add_start_index=True
    )
    return text_processor.split_documents(raw_documents)

def index_documents(document_chunks):
    try:
        DOCUMENT_VECTOR_DB.add_documents(document_chunks)
    except Exception as e:
        st.error(f"Error indexing documents: {e}")

def find_related_documents(query):
    try:
        return DOCUMENT_VECTOR_DB.similarity_search(query)
    except Exception as e:
        st.error(f"Error retrieving documents: {e}")
        return []

def generate_answer(user_query, context_documents):
    context_text = "\n\n".join([doc.page_content for doc in context_documents])
    conversation_prompt = ChatPromptTemplate.from_template(PROMPT_TEMPLATE)
    response_chain = conversation_prompt | LANGUAGE_MODEL
    try:
        return response_chain.invoke({"user_query": user_query, "document_context": context_text})
    except Exception as e:
        return f"Error generating answer: {e}"

# UI Configuration
st.title("Cogniss Arthritis")
st.markdown("<hr class='divider'>", unsafe_allow_html=True)

# Chat Container
st.markdown("<div class='chat-container'>", unsafe_allow_html=True)

# Automatically process all documents from folder
doc_file_paths = get_document_files()
if doc_file_paths:
    all_raw_docs = []
    processed_files = []
    
    # Load documents from each file
    for file_path in doc_file_paths:
        raw_docs = load_documents(file_path)
        if raw_docs:
            all_raw_docs.extend(raw_docs)
            processed_files.append(os.path.basename(file_path))
    
    if all_raw_docs:
        processed_chunks = chunk_documents(all_raw_docs)
        index_documents(processed_chunks)
        for file_name in processed_files:
            st.markdown(f"<div class='file-card'><p>{file_name}</p></div>", unsafe_allow_html=True)
    else:
        st.error("Failed to process any documents.")
else:
    st.error("Folder is empty")

# Chat Interface
user_input = st.chat_input("Ask about Arthritis")
if user_input:
    st.session_state.chat_history.append({"role": "user", "content": user_input})
    with st.chat_message("user"):
        st.write(user_input)
    
    with st.spinner("Thinking"):
        relevant_docs = find_related_documents(user_input)
        ai_response = generate_answer(user_input, relevant_docs)
        st.session_state.chat_history.append({"role": "assistant", "content": ai_response})
    
    with st.chat_message("assistant", avatar="ðŸ¤–"):
        st.write(ai_response)

# Display chat history
for message in st.session_state.chat_history:
    with st.chat_message(message["role"]):
        st.write(message["content"])

st.markdown("</div>", unsafe_allow_html=True)